openapi: 3.0.3
info:
  title: InfluxDB 3 Core HTTP API
  description: HTTP API service for managing, writing to, and querying from InfluxDB 3 Core.
  version: 1.0.2
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  contact:
    name: InfluxData
    url: https://www.influxdata.com
    email: support@influxdata.com
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Databases
    description: Create, read, update, and delete database and cache resources
  - name: Tables
    description: Manage table schemas and data
  - name: Data Operations
    description: Write, query, and process data
  - name: Legacy APIs
    description: Backwards compatibility APIs for v1.x and v2.x clients
paths:
  /write:
    post:
      operationId: PostLegacyV1Write
      summary: Write line protocol (v1-compatible)
      description: >
        Writes line protocol to the specified database.

        This is a legacy endpoint compatible with InfluxDB 2.x client libraries, the Telegraf `outputs.influxdb` output plugin, and third-party tools.

        Use this endpoint to send data in [line protocol](https://docs.influxdata.com/influxdb3/core/reference/syntax/line-protocol/) format to InfluxDB.
        Use query parameters to specify options for writing data.
      parameters:
        - $ref: '#/components/parameters/dbWriteParam'
        - name: precision
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LegacyWritePrecision'
          description: Precision of timestamps.
        - name: no_sync
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Do not sync writes.
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: byte
            examples:
              plain-utf8-multiline:
                value: |
                  measurement,tag=id001 field=1.0 1234567890
                  measurement,tag=id001 field=1.1 1234567900
      responses:
        "204":
          description: Success ("No Content"). All data in the batch is written and queryable.
        "400":
          description: |
            Bad request. Some (a _partial write_) or all of the data from the batch was rejected and not written.
            If a partial write occurred, then some points from the batch are written and queryable.

            The response body:
              - indicates if a partial write occurred or all data was rejected.
              - contains details about the [rejected points](/influxdb3/core/write-data/troubleshoot/#troubleshoot-rejected-points), up to 100 points.
          content:
            application/json:
              examples:
                rejectedAllPoints:
                  summary: Rejected all points in the batch
                  value: |
                    {
                      "error": "write of line protocol failed",
                      "data": [
                        {
                          "original_line": "dquote> home,room=Kitchen temp=hi",
                          "line_number": 2,
                          "error_message": "No fields were provided"
                        }
                      ]
                    }
                partialWriteErrorWithRejectedPoints:
                  summary: Partial write rejected some points in the batch
                  value: |
                    {
                      "error": "partial write of line protocol occurred",
                      "data": [
                        {
                          "original_line": "dquote> home,room=Kitchen temp=hi",
                          "line_number": 2,
                          "error_message": "No fields were provided"
                        }
                      ]
                    }
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "413":
          description: Request entity too large.
      security:
        - BearerAuth: []
      tags:
        - Legacy v1-compatible
        - Write data
  /api/v2/write:
    post:
      operationId: PostLegacyV2Write
      summary: Write line protocol (v2-compatible)
      description: >
        Writes line protocol to the specified database.

        This is a legacy endpoint compatible with InfluxDB 2.x client libraries the Telegraf `outputs.influxdb_v2` output plugin, and third-party tools.

        Use this endpoint to send data in [line protocol](/influxdb3/core/reference/syntax/line-protocol/) format to InfluxDB.
        Use query parameters to specify options for writing data.

      parameters:
        - description: |
            The compression applied to the line protocol in the request payload.
            To send a gzip payload, pass `Content-Encoding: gzip` header.
          in: header
          name: Content-Encoding
          schema:
            default: identity
            description: |
              Content coding.
              Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.
            enum:
              - gzip
              - identity
            type: string
        - description: |
            The format of the data in the request body.
            To send a line protocol payload, pass `Content-Type: text/plain; charset=utf-8`.
          in: header
          name: Content-Type
          schema:
            default: text/plain; charset=utf-8
            description: |
              `text/plain` is the content type for line protocol. `UTF-8` is the default character set.
            enum:
              - text/plain
              - text/plain; charset=utf-8
            type: string
        - description: |
            The size of the entity-body, in bytes, sent to InfluxDB.
          in: header
          name: Content-Length
          schema:
            description: The length in decimal number of octets.
            type: integer
        - description: |
            The content type that the client can understand.
            Writes only return a response body if they fail (partially or completely)--for example,
            due to a syntax problem or type mismatch.
          in: header
          name: Accept
          schema:
            default: application/json
            description: Error content type.
            enum:
              - application/json
            type: string
        - name: db
          in: query
          required: true
          schema:
            type: string
          description: |
            A database name.
            InfluxDB creates the database if it doesn't already exist, and then
            writes all points in the batch to the database.
        - name: accept_partial
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Whether to accept partial writes.
        - name: precision
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LegacyWritePrecision' 
          description: The precision for unix timestamps in the line protocol batch.
        - name: no_sync
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Do not sync writes.
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "measurement,tag=value field=1 1234567890"
      responses:
        "204":
          description: Write successful.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "413":
          description: Request entity too large.
      security:
        - BearerAuth: []
      tags:
        - Legacy v2-compatible
        - Write data
  /api/v3/write_lp:
    post:
      operationId: PostWriteLP
      summary: Write line protocol
      description: >
        Writes line protocol to the specified database.

        Use this endpoint to send data in [line protocol](/influxdb3/core/reference/syntax/line-protocol/) format to InfluxDB.
        Use query parameters to specify options for writing data.
      parameters:
        - $ref: '#/components/parameters/dbWriteParam' 
        - name: accept_partial
          in: query
          required: false
          schema:
            type: boolean
            default: true
          description: Whether to accept partial writes.
        - name: precision
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/WritePrecision'
          description: Precision of timestamps.
        - name: no_sync
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Do not sync writes.
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "measurement,tag=value field=1 1234567890"
      responses:
        "204":
          description: Write successful.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "413":
          description: Request entity too large.
        "422":
          description: Unprocessable entity.
      security:
        - BearerAuth: []
      tags:
        - Write data
  /api/v3/query_sql:
    get:
      operationId: GetExecuteQuerySQL
      summary: Execute SQL query
      description: Executes an SQL query to retrieve data from the specified database.
      parameters:
        - $ref: '#/components/parameters/db'
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Accept'
      responses:
        "200":
          description: Success. The response body contains query results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
              example:
                results:
                  - series:
                      - name: "mytable"
                        columns: ["time", "value"]
                        values: [["2024-02-02T12:00:00Z", 42]]
            text/csv:
              schema:
                type: string
            application/vnd.apache.parquet:
              schema:
                type: string
            application/jsonl:
              schema:
                type: string
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "404":
          description: Database not found.
        "405":
          description: Method not allowed.
        "422":
          description: Unprocessable entity.
      security:
        - BearerAuth: []
      tags:
        - Query data 
    post:
      operationId: PostExecuteQuerySQL
      summary: Execute SQL query
      description: Executes an SQL query to retrieve data from the specified database.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        "200":
          description: Successful query execution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
            text/csv:
              schema:
                type: string
            application/vnd.apache.parquet:
              schema:
                type: string
            application/jsonl:
              schema:
                type: string
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "404":
          description: Database not found.
        "405":
          description: Method not allowed.
        "422":
          description: Unprocessable entity.
      security:
        - BearerAuth: []
      tags:
        - Query data
  /api/v3/query_influxql:
    get:
      operationId: GetExecuteInfluxQLQuery
      summary: Execute InfluxQL query
      description: Executes an InfluxQL query to retrieve data from the specified database. 
      parameters:
        - $ref: '#/components/parameters/db' 
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Accept'
      responses:
        "200":
          description: Successful query execution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
            text/csv:
              schema:
                type: string
            application/vnd.apache.parquet:
              schema:
                type: string
            application/jsonl:
              schema:
                type: string
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "404":
          description: Database not found.
        "405":
          description: Method not allowed.
        "422":
          description: Unprocessable entity.
      security:
        - BearerAuth: []
      tags:
        - InfluxQL query
    post:
      operationId: PostExecuteQueryInfluxQL
      summary: Execute InfluxQL query
      description: Executes an InfluxQL query to retrieve data from the specified database. 
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        "200":
          description: Successful query execution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
            text/csv:
              schema:
                type: string
            application/vnd.apache.parquet:
              schema:
                type: string
            application/jsonl:
              schema:
                type: string
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "404":
          description: Database not found.
        "405":
          description: Method not allowed.
        "422":
          description: Unprocessable entity.
      security:
        - BearerAuth: []
      tags:
        - InfluxQL query
  /query:
    get:
      operationId: GetLegacyV1ExecuteQuery
      summary: Execute InfluxQL query (v1-compatible)
      description: |
        Executes an InfluxQL query to retrieve data from the specified database. 

        This endpoint is compatible with InfluxDB 1.x client libraries and third-party integrations such as Grafana.
        Use query parameters to specify the database and the InfluxQL query.

      parameters:
        - $ref: '#/components/parameters/db' 
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Accept'
      responses:
        "200":
          description: Successful query execution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
            text/csv:
              schema:
                type: string
            application/vnd.apache.parquet:
              schema:
                type: string
            application/jsonl:
              schema:
                type: string
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "404":
          description: Database not found.
        "405":
          description: Method not allowed.
        "422":
          description: Unprocessable entity.
      security:
        - BearerAuth: []
      tags:
        - Query data
        - Legacy v1-compatible
    post:
      operationId: PostExecuteLegacyV1Query
      summary: Execute InfluxQL query (v1-compatible)
      description: Executes an InfluxQL query to retrieve data from the specified database. 
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        "200":
          description: Success. The response body contains query results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
            text/csv:
              schema:
                type: string
            application/vnd.apache.parquet:
              schema:
                type: string
            application/jsonl:
              schema:
                type: string
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: Access denied.
        "404":
          description: Database not found.
        "405":
          description: Method not allowed.
        "422":
          description: Unprocessable entity.
      security:
        - BearerAuth: []
      tags:
        - Query data
        - Legacy v1-compatible
  /health:
    get:
      operationId: GetHealth
      summary: Health Check
      description: Returns the status of the service.
      responses:
        "200":
          description: Service is running.
        "500":
          description: Service is unavailable.
      tags:
        - Server
  /api/v1/health:
    get:
      operationId: GetHealthV1
      summary: Health Check (v1)
      description: Returns the status of the service.
      responses:
        "200":
          description: Service is running.
        "500":
          description: Service is unavailable.
      tags:
        - Server
        - Legacy v1-compatible
  /ping:
    get:
      operationId: GetPing
      tags:
        - Server
      summary: Ping the Server
      description: Returns basic server information.
      responses:
        "200":
          description: Server is reachable.
  /metrics:
    get:
      operationId: GetMetrics
      summary: Metrics
      description: Retrieves Prometheus-compatible metrics.
      responses:
        "200":
          description: Metrics returned.
      tags:
        - Server
  /api/v3/configure/database:
    get:
      operationId: GetConfigureDatabase
      summary: List Databases
      description: Retrieves a list of databases.
      responses:
        "200":
          description: Databases retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowDatabasesResponse'
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Database not found.
      security:
        - BearerAuth: []
      tags:
        - List 
        - Database
    post:
      operationId: PostConfigureDatabase
      summary: Create a Database
      description: Creates a new database in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
      responses:
        "201":
          description: Database created.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "409":
          description: Database already exists.
      security:
        - BearerAuth: []
      tags:
        - Create
        - Database
    delete:
      operationId: DeleteConfigureDatabase
      summary: Delete a Database
      description: |
        Soft deletes a database.
        The database is scheduled for deletion and unavailable for querying.  
      parameters:
        - $ref: '#/components/parameters/db' 
      responses:
        "200":
          description: Database deleted.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Database not found.
      security:
        - BearerAuth: []
      tags:
        - Delete
        - Database
  /api/v3/configure/table:
    post:
      operationId: PostConfigureTable
      summary: Create a Table
      description: Creates a new table within a database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableRequest'
      responses:
        "201":
          description: Table created.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Database not found.
      security:
        - BearerAuth: []
      tags:
        - Create
        - Table
    delete:
      operationId: DeleteConfigureTable
      summary: Delete a Table
      description: |
        Soft deletes a table.
        The table is scheduled for deletion and unavailable for querying.  
      parameters:
        - $ref: '#/components/parameters/db' 
        - name: table
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Table deleted.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Table not found.
      security:
        - BearerAuth: []
      tags:
        - Delete
        - Table
  /api/v3/configure/distinct_cache:
    post:
      operationId: PostConfigureDistinctCache
      summary: Create Distinct Cache
      description: Creates a distinct cache for a table.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistinctCacheCreateRequest'
      responses:
        "201":
          description: Distinct cache created.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Cache not found.
        "409":
          description: Cache already exists.
      security:
        - BearerAuth: []
      tags:
        - Create
        - Cache
    delete:
      operationId: DeleteConfigureDistinctCache
      summary: Delete Distinct Cache
      description: Deletes a distinct cache.
      parameters:
        - $ref: '#/components/parameters/db'
        - name: table
          in: query
          required: true
          schema:
            type: string
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Distinct cache deleted.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Cache not found.
      security:
        - BearerAuth: []
      tags:
        - Delete
        - Cache
  /api/v3/configure/last_cache:
    post:
      operationId: PostConfigureLastCache
      summary: Create Last Cache
      description: Creates a last cache for a table.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LastCacheCreateRequest'
      responses:
        "201":
          description: Last cache created.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Cache not found.
        "409":
          description: Cache already exists.
      security:
        - BearerAuth: []
      tags:
        - Create
        - Cache
    delete:
      operationId: DeleteConfigureLastCache
      summary: Delete Last Cache
      description: Deletes a last cache.
      parameters:
        - $ref: '#/components/parameters/db' 
        - name: table
          in: query
          required: true
          schema:
            type: string
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Last cache deleted.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Cache not found.
      security:
        - BearerAuth: []
      tags:
        - Delete
        - Cache
  /api/v3/configure/processing_engine_trigger:
    post:
      operationId: PostConfigureProcessingEngineTrigger
      summary: Create Processing Engine Trigger
      description: Creates a new processing engine trigger.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessingEngineTriggerRequest'
      responses:
        "201":
          description: Processing engine trigger created.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Trigger not found.
      security:
        - BearerAuth: []
      tags:
        - Create
        - Processing engine
    delete:
      operationId: DeleteConfigureProcessingEngineTrigger
      summary: Delete Processing Engine Trigger
      description: Deletes a processing engine trigger.
      parameters:
        - $ref: '#/components/parameters/db' 
        - name: trigger_name
          in: query
          required: true
          schema:
            type: string
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Processing engine trigger deleted.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Trigger not found.
      security:
        - BearerAuth: []
      tags:
        - Delete
        - Processing engine
  /api/v3/configure/processing_engine_trigger/disable:
    post:
      operationId: PostDisableProcessingEngineTrigger
      summary: Disable Processing Engine Trigger
      description: Disables a processing engine trigger.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessingEngineTriggerRequest'
      responses:
        "200":
          description: Processing engine trigger disabled.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Trigger not found.
      security:
        - BearerAuth: []
      tags:
        - Processing engine
  /api/v3/configure/processing_engine_trigger/enable:
    post:
      operationId: PostEnableProcessingEngineTrigger
      summary: Enable Processing Engine Trigger
      description: Enables a processing engine trigger.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessingEngineTriggerRequest'
      responses:
        "200":
          description: Processing engine trigger enabled.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Trigger not found.
      security:
        - BearerAuth: []
      tags:
        - Processing engine
  /api/v3/configure/plugin_environment/install_packages:
    post:
      operationId: PostInstallPluginPackages
      summary: Install Plugin Packages
      description: Installs packages for the plugin environment.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: Packages installed.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
        - BearerAuth: []
      tags:
        - Processing engine
  /api/v3/configure/plugin_environment/install_requirements:
    post:
      operationId: PostInstallPluginRequirements
      summary: Install Plugin Requirements
      description: Installs requirements for the plugin environment.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: Requirements installed.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
        - BearerAuth: []
      tags:
        - Processing engine
  /api/v3/plugin_test/wal:
    post:
      operationId: PostTestWALPlugin
      summary: Test WAL Plugin
      description: Executes a test of a write-ahead logging (WAL) plugin.
      responses:
        "200":
          description: Plugin test executed.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Plugin not enabled.
      security:
        - BearerAuth: []
      tags:
        - Processing engine 
  /api/v3/plugin_test/schedule:
    post:
      operationId: PostTestSchedulingPlugin
      summary: Test Scheduling Plugin
      description: Executes a test of a scheduling plugin.
      responses:
        "200":
          description: Plugin test executed.
        "400":
          description: Bad request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Plugin not enabled.
      security:
        - BearerAuth: []
      tags:
        - Processing engine
  /api/v3/engine/{plugin_path}:
    parameters:
      - name: plugin_path
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: GetProcessingEnginePluginRequest
      summary: Custom Processing Engine Request (GET)
      description: Sends a custom request to a processing engine plugin.
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        "200":
          description: Request successful.
        "400":
          description: Malformed request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Plugin not found.
        "500":
          description: Processing failure.
      security:
        - BearerAuth: []
      tags:
        - Processing engine
    post:
      operationId: PostProcessingEnginePluginRequest
      summary: Custom Processing Engine Request (POST)
      description: Sends a custom request to a processing engine plugin.
      parameters:
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: Request successful.
        "400":
          description: Malformed request.
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Plugin not found.
        "500":
          description: Processing failure.
      security:
        - BearerAuth: []
      tags:
        - Processing engine
components:
  parameters:
    ContentEncoding:
      name: Content-Encoding
      in: header
      description: |
        The compression applied to the line protocol in the request payload.
        To send a gzip payload, pass `Content-Encoding: gzip` header.
      schema:
        $ref: '#/components/schemas/ContentEncoding'
      required: false
    Accept:
      name: Accept
      in: header
      schema:
        $ref: '#/components/schemas/Accept'
      required: false
      description: The content type that the client can understand.
    ContentLength:
      name: Content-Length
      in: header
      description: |
        The size of the entity-body, in bytes, sent to InfluxDB.
      schema:
        $ref: '#/components/schemas/ContentLength' 
    ContentType:
      name: Content-Type
      in: header
      description: |
        The format of the data in the request body.

        To send a line protocol payload, pass `Content-Type: text/plain; charset=utf-8`.
      schema:
        $ref: '#/components/schemas/ContentType'
      required: false
    dbWriteParam:
      name: db
      in: query
      required: true
      schema:
        type: string
      description: |
        A database name.
        InfluxDB creates the database if it doesn't already exist, and then
        writes all points in the batch to the database.
    accept_partial:
      name: accept_partial
      in: query
      required: false
      schema:
        type: boolean
        default: false
      description: Whether to accept partial writes.
    precision:
      name: precision
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/WritePrecision' 
      description: The precision for unix timestamps in the line protocol batch.
    precisionLegacyParam:
      name: precision
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/LegacyWritePrecision' 
      description: The precision for unix timestamps in the line protocol batch.
    no_sync:
      name: no_sync
      in: query
      required: false
      schema:
        type: boolean
        default: false
      description: Do not sync writes.
    db:
      name: db
      in: query
      required: true
      schema:
        type: string
      description: |
        The name of the database.
    q:
      name: q
      in: query
      required: true
      schema:
        type: string
      description: |
        The query to execute.
  requestBodies:
    lineProtocolRequestBody:
      required: true
      content:
        text/plain:
          schema:
            type: string
          examples:
            line:
              summary: Example line protocol
              value: "measurement,tag=value field=1 1234567890"
            multiline:
              summary: Example line protocol with UTF-8 characters
              value: |
                measurement,tag=value field=1 1234567890
                measurement,tag=value field=2 1234567900
                measurement,tag=value field=3 1234568000
  schemas:
    ContentEncoding:
      type: string
      enum: [gzip, identity]
      description: |
        Content coding.
        Use `gzip` for compressed data or `identity` for unmodified, uncompressed data.
      default: identity

    ContentType:
      type: string
      enum: [text/plain, text/plain; charset=utf-8] 
      description: |
        `text/plain` is the content type for line protocol. `UTF-8` is the default character set.
      default: text/plain; charset=utf-8

    ContentLength:
      type: integer
      description: The length in decimal number of octets.

    Accept:  
      type: string
      enum: [application/json]
      description: Error content type.
      default: application/json

    db:
      type: string 
      description: |
        A database name.
        InfluxDB creates the database if it doesn't already exist, and then
        writes all points in the batch to the database.

    accept_partial:
      type: boolean
      default: false
      description: Whether to accept partial writes.
    precision:
      $ref: '#/components/schemas/LegacyWritePrecision'
    no_sync:
      type: boolean
      default: false
      description: Do not sync writes.

    LegacyWritePrecision:
      enum:
        - ms
        - s
        - us
        - ns
      type: string
      description: |
        The precision for unix timestamps in the line protocol batch.
        Use `ms` for milliseconds, `s` for seconds, `us` for microseconds, or `ns` for nanoseconds.
    WritePrecision:
      enum:
        - auto
        - millisecond
        - second
        - microsecond
        - nanosecond
      type: string
    QueryRequest:
      type: object
      properties:
        database:
          type: string
        query_str:
          type: string
        format:
          type: string
        params:
          type: object
          additionalProperties: true
      required:
        - database
        - query_str
      example:
        database: "mydb"
        query_str: "SELECT * FROM mytable"
        format: "json"
        params: {}
    CreateDatabaseRequest:
      type: object
      properties:
        db:
          type: string
      required:
        - db
    CreateTableRequest:
      type: object
      properties:
        db:
          type: string
        table:
          type: string
        tags:
          type: array
          items:
            type: string
        fields:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
            required:
              - name
              - type
      required:
        - db
        - table
        - fields
    DistinctCacheCreateRequest:
      type: object
      properties:
        db:
          type: string
        table:
          type: string
        name:
          type: string
          description: Optional cache name.
        columns:
          type: array
          items:
            type: string
        max_cardinality:
          type: integer
          description: Optional maximum cardinality.
        max_age:
          type: integer
          description: Optional maximum age in seconds.
      required:
        - db
        - table
        - columns
      example:
        db: "mydb"
        table: "mytable"
        columns: ["tag1", "tag2"]
        max_cardinality: 1000
        max_age: 3600
    LastCacheCreateRequest:
      type: object
      properties:
        db:
          type: string
        table:
          type: string
        name:
          type: string
          description: Optional cache name.
        key_columns:
          type: array
          items:
            type: string
          description: Optional list of key columns.
        value_columns:
          type: array
          items:
            type: string
          description: Optional list of value columns.
        count:
          type: integer
          description: Optional count.
        ttl:
          type: integer
          description: Optional time-to-live in seconds.
      required:
        - db
        - table
      example:
        db: "mydb"
        table: "mytable"
        key_columns: ["tag1"]
        value_columns: ["field1"]
        count: 100
        ttl: 3600
    ProcessingEngineTriggerRequest:
      type: object
      properties:
        db:
          type: string
        plugin_filename:
          type: string
        trigger_name:
          type: string
        trigger_specification:
          type: string
        trigger_arguments:
          type: object
          additionalProperties: true
        disabled:
          type: boolean
      required:
        - db
        - plugin_filename
        - trigger_name
        - trigger_specification
    ShowDatabasesResponse:
      type: object
      properties:
        databases:
          type: array
          items:
            type: string
    QueryResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
      example:
        results:
          - series:
              - name: "mytable"
                columns: ["time", "value"]
                values: [["2024-02-02T12:00:00Z", 42]]
    ErrorMessage:
      type: object
      properties:
        error:
          type: string
        data:
          type: object
          nullable: true
    LineProtocolError:
      properties:
        code:
          description: Code is the machine-readable error code.
          enum:
            - internal error
            - not found
            - conflict
            - invalid
            - empty value
            - unavailable
          readOnly: true
          type: string
        err:
          description: Stack of errors that occurred during processing of the request. Useful for debugging.
          readOnly: true
          type: string
        line:
          description: First line in the request body that contains malformed data.
          format: int32
          readOnly: true
          type: integer
        message:
          description: Human-readable message.
          readOnly: true
          type: string
        op:
          description: Describes the logical code operation when the error occurred. Useful for debugging.
          readOnly: true
          type: string
      required:
        - code
  responses:
    Unauthorized:
      description: Unauthorized access.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    Forbidden:
      description: Access denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
      description: |
        A Bearer token for authentication.
        Provide the scheme and the API token in the `Authorization` header--for example:

        ```bash
        curl http://localhost:8181/api/v3/query_influxql \
          --header "Authorization: Bearer API_TOKEN"
        ```
