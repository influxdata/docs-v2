/*
This script auto-populates Flux versions in data/flux_influxdb_versions.yml.
*/

const axios = require('axios')
const yaml = require('js-yaml')
const fs = require('fs')

// GitHub token to access files in the private InfluxDB Enterprise repo
const githubToken = process.env.GITHUB_TOKEN

// Get the latest version of Flux
async function getLatestFlux() {
  var res = await axios.get('https://github.com/influxdata/flux/releases/latest');

  return res.request.path.match(/\/v(\d.*)$/)[1];
}

// Retrieve the dependency file for a specific InfluxDB version
async function getVersionDeps(minorVersion, repo) {
  var url = `https://raw.githubusercontent.com/influxdata/${repo}/${minorVersion}/go.mod`;
  var data = axios.get(url, {
      headers: {
        Authorization: `Token ${githubToken}`
      }
    }).then(res => res.data);

  return data
}

// Extract the Flux version from the InfluxDB dependency list
async function getFluxVersion(minorVersion, product='oss') {
  var repo = (product === 'oss') ? 'influxdb' : 'plutonium';
  var depsBody = await getVersionDeps(minorVersion, repo)

  return depsBody.match(/github.com\/influxdata\/flux v(\d+\.\d+\.\d+)/)[1]
}

// Loop through an InfluxDB version array, retrieve the Flux version packaged with
// each version of InfluxDB, and update the base version object with the new
// key-value pair
async function getAllFluxVersions(versionArr, product='oss', baseObj) {
  for (let index = 0; index < versionArr.length; index++) {
    const influxdbVersion = versionArr[index]
    const fluxVersion = await getFluxVersion(influxdbVersion, product)
    baseObj[influxdbVersion] = fluxVersion
  }
}

// Manually add a InfluxDB-version/Flux-version key-value pair to a versions object
function addVersion(versionObj, influxdbVer, fluxVer) {
  versionObj[influxdbVer] = fluxVer
}

// Load product data from the product data file
const productData = yaml.load(fs.readFileSync('./data/products.yml', 'utf8'))

// Update InfluxDB version arrays by removing 'v' from each version and filtering
// out InfluxDB versions that don't have a Flux dependency in their go.mod
const ossVersionArr = productData.influxdb.versions.map((element, index) => {return element.replace('v', '')}).filter(element => parseFloat(element) >= 1.7);
const enterpriseVersionArr = productData.enterprise_influxdb.versions.map((element, index) => {return element.replace('v', '')}).filter(element => parseFloat(element) >= 1.9);

// Instantiate base Flux version variables
var latestFlux;
var currentFlux;
var ossVersions = {};
var enterpriseVersions = {};
var fluxVersions = {};

// Retrieve all Flux versions and write them to flux_influxdb_versions.yml
(async () => {
  await getAllFluxVersions(ossVersionArr, 'oss', ossVersions);
  await getAllFluxVersions(enterpriseVersionArr, 'enterprise', enterpriseVersions);

  // Manually add versions that aren't included in the original versions arrays
  await addVersion(ossVersions, 'nightly', await getFluxVersion('master'));
  await addVersion(enterpriseVersions, '1.7', await getFluxVersion('1.7'));
  await addVersion(enterpriseVersions, '1.8', await getFluxVersion('1.8'));

  // Build the Flux versions object that contains all necessary flux version information
  fluxVersions = {
    flux: {latest: await getLatestFlux()},
    cloud: {current: await getFluxVersion('master')},
    oss: ossVersions,
    enterprise: enterpriseVersions
  }

  const commentString = `# This file is automatically generated by update-flux-versions.js.
# It is used to identify what versions of Flux are installed with each version
# of InfluxDB. You are welcome to make changes to this file, but they will be
# overwritten whenever update-flux-versions.js runs in the build/deploy process.
`
  fluxVersionsYAML = yaml.dump(fluxVersions)

  // Write the comment and yaml to the flux_influxdb_versions.yml data file
  fs.writeFileSync('./data/flux_influxdb_versions.yml', commentString + '\n' + fluxVersionsYAML)
})().then(data => console.log('Flux versions updated!'))
